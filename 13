#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 2
#define MOD 26
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;  }
int determinant(int matrix[SIZE][SIZE]) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % MOD;
}
int inverseMatrix(int matrix[SIZE][SIZE], int inverse[SIZE][SIZE]) {
    int det = determinant(matrix);
    int invDet = modInverse(det, MOD);
    if (invDet == -1) {
        return 0;
    }
    inverse[0][0] = matrix[1][1] * invDet % MOD;
    inverse[0][1] = -matrix[0][1] * invDet % MOD;
    inverse[1][0] = -matrix[1][0] * invDet % MOD;
    inverse[1][1] = matrix[0][0] * invDet % MOD;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            inverse[i][j] = (inverse[i][j] + MOD) % MOD;
        }
    }
    return 1;
}
void matrixMultiply(int matrix1[SIZE][SIZE], int matrix2[SIZE], int result[SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        result[i] = 0;
        for (int j = 0; j < SIZE; j++) {
            result[i] += matrix1[i][j] * matrix2[j];
        }
        result[i] %= MOD;
    }
}
void solveKeyMatrix(int p1[SIZE], int p2[SIZE], int c1[SIZE], int c2[SIZE], int key[SIZE][SIZE]) {
    int matrixP[SIZE][SIZE] = {{p1[0], p1[1]}, {p2[0], p2[1]}};
    int matrixC[SIZE][SIZE] = {{c1[0], c1[1]}, {c2[0], c2[1]}};
    int inverseP[SIZE][SIZE];
    if (!inverseMatrix(matrixP, inverseP)) {
        printf("Error: Plaintext matrix is not invertible.\n");
        return;
    }
    int temp[SIZE];
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            key[i][j] = 0;
            for (int k = 0; k < SIZE; k++) {
                key[i][j] += inverseP[i][k] * matrixC[k][j];
            }
            key[i][j] %= MOD;
        }
    }
}
void printMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}
int main(void) {
    int p1[SIZE] = {12, 4};
    int p2[SIZE] = {4, 19};
    int c1[SIZE] = {5, 8};
    int c2[SIZE] = {15, 2};
    int key[SIZE][SIZE];
    solveKeyMatrix(p1, p2, c1, c2, key);
    printf("Key Matrix: \n");
    printMatrix(key);
    return 0;
}
