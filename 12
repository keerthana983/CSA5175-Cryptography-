#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 2
#define MOD 26
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;
}
void matrixMultiply(int matrix1[SIZE][SIZE], int matrix2[SIZE], int result[SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        result[i] = 0;
        for (int j = 0; j < SIZE; j++) {
            result[i] += matrix1[i][j] * matrix2[j];
        }
        result[i] %= MOD;
    }
}
int determinant(int matrix[SIZE][SIZE]) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % MOD;
}
int inverseMatrix(int matrix[SIZE][SIZE], int inverse[SIZE][SIZE]) {
    int det = determinant(matrix);
    int invDet = modInverse(det, MOD);
    if (invDet == -1) {
        return 0;
    }
    inverse[0][0] = matrix[1][1] * invDet % MOD;
    inverse[0][1] = -matrix[0][1] * invDet % MOD;
    inverse[1][0] = -matrix[1][0] * invDet % MOD;
    inverse[1][1] = matrix[0][0] * invDet % MOD;
    
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            inverse[i][j] = (inverse[i][j] + MOD) % MOD;
        }
    }
    return 1;
}
void encrypt(char message[], int key[SIZE][SIZE], char result[]) {
    int messageLength = strlen(message);
    int messageVector[SIZE];
    int encryptedVector[SIZE];
    for (int i = 0, j = 0; i < messageLength; i++) {
        if (isalpha(message[i])) {
            messageVector[j++] = tolower(message[i]) - 'a';
            if (j == SIZE) {
                matrixMultiply(key, messageVector, encryptedVector);
                result[i - 1] = encryptedVector[0] + 'a';
                result[i] = encryptedVector[1] + 'a';
                j = 0;
            }
        }
    }
    result[messageLength] = '\0';
}
void decrypt(char ciphertext[], int key[SIZE][SIZE], char result[]) {
    int inverseKey[SIZE][SIZE];
    if (!inverseMatrix(key, inverseKey)) {
        printf("Key matrix is not invertible\n");
        return;
    }
    int messageLength = strlen(ciphertext);
    int messageVector[SIZE];
    int decryptedVector[SIZE];
    for (int i = 0, j = 0; i < messageLength; i++) {
        if (isalpha(ciphertext[i])) {
            messageVector[j++] = ciphertext[i] - 'a';
            if (j == SIZE) {
                matrixMultiply(inverseKey, messageVector, decryptedVector);
                result[i - 1] = decryptedVector[0] + 'a';
                result[i] = decryptedVector[1] + 'a';
                j = 0;
            }
        }
    }
    result[messageLength] = '\0';
}
int main(void) {
    int key[SIZE][SIZE] = {{9, 4}, {5, 7}};
    char plaintext[] = "meet me at the usual place at ten rather than eightoclock";
    char ciphertext[100];
    char decrypted[100];
    encrypt(plaintext, key, ciphertext);
    printf("Ciphertext: %s\n", ciphertext);
    decrypt(ciphertext, key, decrypted);
    printf("Decrypted message: %s\n", decrypted);
    return 0;
}

